{"ts":1345522448512,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function() {\n    var lastTime = 0;\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];\n        window.cancelAnimationFrame = \n          window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];\n    }\n \n    if (!window.requestAnimationFrame)\n        window.requestAnimationFrame = function(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function() { callback(currTime + timeToCall); }, \n              timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n \n    if (!window.cancelAnimationFrame)\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n}());\n\n\nvar canvas, context, game;\n\n\n\ninit();\nanimate();\n\nfunction init() {\n\n    canvas = document.createElement( 'canvas' );\n    \n    canvas.width = 256;\n    canvas.height = 256;\n\n    context = canvas.getContext( '2d' );\n    game = new Game(canvas, context);\n\n    document.body.appendChild( canvas );\n\n}\n\nfunction animate(dt) {\n    requestAnimationFrame( animate );\n    draw(dt);\n\n}\n\nfunction draw(dt) {\n\n    var time = dt * 0.002;\n    var x = Math.sin( time ) * 30 + 128;\n    var y = Math.cos( time * 1 ) * 50 + 128;\n\n    context.fillStyle = 'rgb(245,245,245)';\n    context.fillRect( 0, 0, 255, 255 );\n\n    context.fillStyle = 'rgb(255,0,0)';\n    context.beginPath();\n    context.arc( x, y, 10, 0, Math.PI * 2, true );\n    context.closePath();\n    context.fill();\n    \n    game.draw();\n\n}\n\nfunction Game(canvas, ctx){\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.shapes = [];\n}\n\nGame.prototype.draw = function(){\n    var shapes = this.shapes;\n    //this.clear();\n \n    // ** Add stuff you want drawn in the background all the time here **\n \n    // draw all shapes\n    var l = shapes.length;\n    for (var i = 0; i < l; i++) {\n      var shape = shapes[i];\n      // We can skip the drawing of elements that have moved off the screen:\n      if (shape.x > this.width || shape.y > this.height ||\n          shape.x + shape.w < 0 || shape.y + shape.h < 0) continue;\n      shapes[i].draw(ctx);\n    }\n}\n\n\n//from introduction to canvas http://simonsarris.com/blog/510-making-html5-canvas-useful\n\n// Constructor for Shape objects to hold data for all drawn objects.\n// For now they will just be defined as rectangles.\nfunction Shape(x, y, w, h, fill) {\n  // This is a very simple and unsafe constructor. \n  // All we're doing is checking if the values exist.\n  // \"x || 0\" just means \"if there is a value for x, use that. Otherwise use 0.\"\n  this.x = x || 0;\n  this.y = y || 0;\n  this.w = w || 1;\n  this.h = h || 1;\n  this.fill = fill || '#AAAAAA';\n}\n \n// Draws this shape to a given context\nShape.prototype.draw = function(ctx) {\n  ctx.fillStyle = this.fill;\n  ctx.fillRect(this.x, this.y, this.w, this.h);\n};\n\nGame.prototype.getMouse = function(e) {\n  var element = canvas, offsetX = 0, offsetY = 0, mx, my;\n \n  // Compute the total offset\n  if (element.offsetParent !== undefined) {\n    do {\n      offsetX += element.offsetLeft;\n      offsetY += element.offsetTop;\n    } while ((element = element.offsetParent));\n  }\n \n  // Add padding and border style widths to offset\n  // Also add the <html> offsets in case there's a position:fixed bar\n  offsetX += this.stylePaddingLeft + this.styleBorderLeft + this.htmlLeft;\n  offsetY += this.stylePaddingTop + this.styleBorderTop + this.htmlTop;\n \n  mx = e.pageX - offsetX;\n  my = e.pageY - offsetY;\n \n  // We return a simple javascript object (a hash) with x and y defined\n  return {x: mx, y: my};\n}\n\ncanvas.addEventListener('mousemove', function(e) {\n    var mouse = game.getMouse(e);\n    var mx = mouse.x;\n    var my = mouse.y;\n    //todo\n    game.shapes.push( Shape(mx, my, 60, 30, 'rgba(127, 255, 212, .5)') );\n  }, true);\n\n// example code from mr doob : http://mrdoob.com/lab/javascript/requestanimationframe/\n"]],"start1":0,"start2":0,"length1":0,"length2":4115}]],"length":4115}
{"contributors":[],"silentsave":false,"ts":1347280803566,"patch":[[{"diffs":[[1,"\n"],[0,"(function() {\n    va"]],"start1":0,"start2":0,"length1":20,"length2":21},{"diffs":[[0,"\n\n\n\n"],[-1,"init();\nanimate();\n\nfunction init() {\n\n    canvas = document.createElement( '"],[1,"\n\nfunction Game(canvas, ctx){\n    var that = this;\n    \n    this.canvas = "],[0,"canvas"],[-1,"' )"],[0,";\n    "],[-1,"\n    canvas.width = 256;\n    canvas.height = 256"],[1,"this.ctx = ctx;\n    this.width = canvas.width;\n    this.height = canvas.height;\n    this.mouse = {x: this.width/2, y: 0}"],[0,";\n"],[-1,"\n"],[0,"    "],[-1,"context = canvas.getContext( '2d' );\n    game = new Game(canvas, context"],[1,"this.bullets = [];\n    this.enemies = [];\n    this.tower = new Tower(this.width/2, this.height, 10, 20, 'rgb(0,0,0)'"],[0,");\n"],[-1,"\n"],[0,"    "],[-1,"document.body.appendChild( canvas );\n\n}\n\nfunction animate(dt) {\n    requestAnimationFrame( animate );\n    draw(dt);\n\n}\n\nfunction draw(dt"],[1,"this.viewfinder = new Viewfinder(0, 0, 20, 20, 'rgb(0,0,0)');\n    this.toClean = 0;\n    this.enemiesToClean = 0;\n    \n    this.createEnemies = setInterval(function("],[0,") {\n"],[-1,"\n"],[0,"    "],[-1,"var time = dt * 0.002;\n    var x = Math.sin( time ) * 30 + 128;\n    var y = Math.cos( time * 1 ) * 50 + 128;\n\n    context"],[1,"    that.addEnemy = true;\n    }, 1000);\n    \n}\nGame.prototype.clear = function(){\n    this.ctx"],[0,".fil"]],"start1":990,"start2":990,"length1":501,"length2":609},{"diffs":[[0,",245)';\n    "],[-1,"context"],[1,"this.ctx"],[0,".fillRect( 0"]],"start1":1620,"start2":1620,"length1":31,"length2":32},{"diffs":[[0," );\n"],[-1,"\n    context.fillStyle = 'rgb(255,0,0)';\n    context.beginPath();\n    context.arc( x, y, 1"],[1,"}\n\n\n\nGame.prototype.draw = function(){\n    this.clear();\n    \n    if(this.addBullet){\n        var mouse = this.mouse;\n\n        //todo\n        var atan = game.tower.getRotate(mouse);           \n        game.bullets.push( new Bullet(game.tower.x, game.tower.y, 5, atan, 'rgba(125, 5"],[0,"0, "],[1,"5"],[0,"0, "],[-1,"Math.PI * 2, true );\n    context.closePath();\n    context.fill()"],[1,"1)') );\n        this.addBullet = false;\n    }\n    if(this.addEnemy){\n        var x = Math.floor(Math.random() * this.width) + 1"],[0,";\n    "],[-1,"\n"],[0,"    "]],"start1":1665,"start2":1665,"length1":175,"length2":428},{"diffs":[[0,"ame."],[-1,"draw();\n\n}\n\nfunction Game(canvas, ctx){\n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.shapes = [];\n}\n\nGame.prototype.draw = function(){"],[1,"enemies.push( new Enemy(x, 0, 20, 20, 'rgba(125, 50, 50, 1)') );\n        this.addEnemy = false;\n    }\n    //enemies\n    var enemies = this.enemies;\n    var l = ( enemies && enemies.length) ? enemies.length : 0;\n    for (var i = 0; i < l; i++) {\n      var enemy = enemies[i];\n      \n      // We can skip the drawing of elements that have moved off the screen:\n      if (!enemy || enemy.y > this.height ){\n              \n              enemies[i] = false;\n              this.enemiesToClean++;\n              \n        }else{\n            enemies[i].draw(this.ctx);\n        }\n    }\n    \n    \n    \n    //Bullets"],[0,"\n   "]],"start1":2094,"start2":2094,"length1":152,"length2":611},{"diffs":[[0,"his."],[-1,"shape"],[1,"bullet"],[0,"s;\n    "],[-1,"//this.clear();"],[0,"\n \n "]],"start1":2720,"start2":2720,"length1":35,"length2":21},{"diffs":[[0,"here **\n"],[1,"    this.tower.draw(this.ctx, this.mouse);\n    this.viewfinder.draw(this.ctx, this.mouse);\n"],[0," \n    //"]],"start1":2806,"start2":2806,"length1":16,"length2":107},{"diffs":[[0," var l ="],[1," ( shapes &&"],[0," shapes."]],"start1":2933,"start2":2933,"length1":16,"length2":28},{"diffs":[[0,"s.length"],[1,") ? shapes.length : 0"],[0,";\n    fo"]],"start1":2959,"start2":2959,"length1":16,"length2":37},{"diffs":[[0," shapes[i];\n"],[1,"      \n"],[0,"      // We "]],"start1":3041,"start2":3041,"length1":24,"length2":31},{"diffs":[[0,"    if ("],[1,"!shape || "],[0,"shape.x "]],"start1":3139,"start2":3139,"length1":16,"length2":26},{"diffs":[[0," < 0"],[-1,") continue;\n      shapes[i].draw(ctx);\n    }"],[1," || shape.offset > this.height){\n              \n              shapes[i] = false;\n              this.toClean++;\n              \n        }else{\n            shapes[i].draw(this.ctx);\n        }\n    }\n    \n    if(this.toClean > 2){\n        //console.log('clean', l);\n        this.bullets = shapes.filter(function(e){return e});\n        //console.log('cleaned: ', this.bullets.length);\n        this.toClean = 0;\n    }\n    if(this.enemiesToClean > 2){\n        //console.log('enemies clean', l);\n        this.enemies = enemies.filter(function(e){return e});\n        //console.log('enemies cleaned: ', this.enemies.length);\n        this.enemiesToClean = 0;\n    }\n}\nfunction Tower(x, y, w, h, fill) {\n  // This is a very simple and unsafe constructor. \n  // All we're doing is checking if the values exist.\n  // \"x || 0\" just means \"if there is a value for x, use that. Otherwise use 0.\"\n  this.x = x || 0;\n  this.y = y || 0;\n  this.w = w || 1;\n  this.h = h || 1;\n  this.fill = fill || '#AAAAAA';\n}\nTower.prototype.getRotate = function(mouse){\n    //Math.atan(2);\n    //tg = a/b\n    var a = mouse.x - this.x;\n   var b = mouse.y - this.y;\n   var tg = a/b;\n   var atan1 = Math.atan(tg);\n   console.log('mouse tg', tg);\n   var atan = -Math.PI*2-atan1;\n   return atan;\n}\nTower.prototype.draw = function(ctx, mouse){\n    ctx.save();\n    \n    ctx.fillStyle = this.fill;\n    context.beginPath();\n    context.arc( this.x, this.y, 10, 0, Math.PI * 2, true );\n    context.closePath();\n    context.fill();\n    if(typeof mouse !== \"undefined\"){\n           //Math.atan(2);\n           //tg = a/b\n           var atan = this.getRotate(mouse);\n           ctx.translate(this.x, this.y);\n           ctx.rotate(atan);\n           ctx.fillRect(0-this.w/2, 0-this.h, this.w, this.h);\n           \n    }\n    //ctx.fillStyle = '#AA00AA';\n    //ctx.fillRect(this.x - this.w /2, this.y - this.h, this.w, this.h);\n        \n    ctx.restore();"],[0,"\n}\n\n"],[-1,"\n"],[0,"//fr"]],"start1":3258,"start2":3258,"length1":57,"length2":1913},{"diffs":[[0,"unction "],[-1,"Shape"],[1,"Bullet(x, y, w, angle, fill) {\n  // This is a very simple and unsafe constructor. \n  // All we're doing is checking if the values exist.\n  // \"x || 0\" just means \"if there is a value for x, use that. Otherwise use 0.\"\n  this.x = x || 0;\n  this.y = y || 0;\n  this.w = w || 1;\n  this.origAngle = angle || 0;\n  this.angle = Math.PI  + this.origAngle;\n  this.fill = fill || '#AAAAAA';\n  \n  this.offset = 1;\n}\n \n// Draws this shape to a given context\nBullet.prototype.draw = function(ctx) {\n    ctx.save();\n    \n    \n    context.beginPath();    \n    \n    ctx.translate(game.tower.x, game.tower.y);\n    ctx.rotate(this.angle); \n    ctx.fillStyle = 'rgba(0,245,245, 0.1 )';\n    context.fillRect(0, 0, 200, 200);\n          \n    ctx.fillStyle = this.fill;\n    context.arc( 0, 25+this.offset, this.w, 0, Math.PI * 2, true );\n    context.closePath();\n    context.fill();\n     ctx.restore();\n     \n    this.updatePosition(ctx);\n  //ctx.fillRect(this.x, this.y, this.w, this.h);\n};\n\nBullet.prototype.updatePosition = function(ctx) {\n    //var a = mouse.x - this.x;\n    //var b = mouse.y - this.y;\n    //var tg = a/b;\n    //var atan = -Math.PI*2 - Math.atan(tg);\n    \n    var atan = -(this.origAngle + Math.PI*2);// * Math.PI/180;\n    //console.log('bullet atan', atan);\n    var a_b = Math.tan(atan);\n    var xOffset = a_b / this.offset;\n    \n    this.y = game.tower.y - xOffset ;\n    console.log(this.y);\n    ctx.fillStyle = 'rgba(50,245,245, 0.6 )';\n    ctx.fillRect(this.x - this.w /2, this.y - this.w, this.w, this.w);\n    \n    this.offset += 1;\n};\n\nfunction Enemy(x, y, w, h, fill) {\n  // This is a very simple and unsafe constructor. \n  // All we're doing is checking if the values exist.\n  // \"x || 0\" just means \"if there is a value for x, use that. Otherwise use 0.\"\n  this.x = x || 0;\n  this.y = y || 0;\n  this.w = w || 1;\n  this.h = h || 1;\n  this.fill = fill || 'rgba(0,245,245, 0.1 )';\n}\n\nEnemy.prototype.draw = function(ctx, mouse){\n    ctx.save();\n    \n    ctx.fillStyle = this.fill;\n        \n    //ctx.fillStyle = '#AA00AA';\n    ctx.fillRect(this.x - this.w /2, this.y - this.h, this.w, this.h);\n    \n    this.y += 1;\n        \n    ctx.restore();\n}\n\n\nfunction Viewfinder"],[0,"(x, y, w"]],"start1":5379,"start2":5379,"length1":21,"length2":2187},{"diffs":[[0,"context\n"],[-1,"Shape"],[1,"Viewfinder"],[0,".prototy"]],"start1":7910,"start2":7910,"length1":21,"length2":26},{"diffs":[[0,"(ctx"],[-1,") {\n  ctx.fillStyle = this.fill;\n  "],[1,", mouse) {\n  \n    if(typeof mouse !== \"undefined\"){\n        ctx.strokeStyle = this.fill;\n        context.beginPath();\n        context.arc( mouse.x, mouse.y, this.w, 0, Math.PI * 2, true );\n        context.closePath();\n        context.stroke();\n    }\n    \n    \n  //"],[0,"ctx."]],"start1":7954,"start2":7954,"length1":43,"length2":272},{"diffs":[[0,"d bar\n  "],[1,"//"],[0,"offsetX "]],"start1":8697,"start2":8697,"length1":16,"length2":18},{"diffs":[[0,"Left;\n  "],[1,"//"],[0,"offsetY "]],"start1":8774,"start2":8774,"length1":16,"length2":18},{"diffs":[[0,"p;\n "],[-1,"\n  mx = e"],[1,"if( e.targetTouches && e.targetTouches[0] ){\n     mx = e.targetTouches[0]"],[0,".pag"]],"start1":8851,"start2":8851,"length1":17,"length2":81},{"diffs":[[0,"ffsetX;\n"],[1,"   "],[0,"  my = e"]],"start1":8938,"start2":8938,"length1":16,"length2":19},{"diffs":[[0," my = e."],[1,"targetTouches[0]."],[0,"pageY - "]],"start1":8950,"start2":8950,"length1":16,"length2":33},{"diffs":[[0,"ffsetY;\n"],[1," }else{\n      mx = e.pageX - offsetX;\n      my = e.pageY - offsetY;\n }\n"],[0," \n  // W"]],"start1":8984,"start2":8984,"length1":16,"length2":87},{"diffs":[[0,"\n}\n\n"],[-1,"canvas.addEventListener('mousemove', function(e) {\n    var mouse = game.getMouse(e);\n    var mx = mouse.x"],[1,"\n\n// example code from mr doob : http://mrdoob.com/lab/javascript/requestanimationframe/\n\n\ninit();\nanimate();\n\nfunction init() {\n\n    canvas = document.createElement( 'canvas' );\n    \n    canvas.width = 256;\n    canvas.height = 256;\n\n    context = canvas.getContext( '2d' );\n    game = new Game(canvas, context);\n\n    document.body.appendChild( canvas );\n    //listeners\n    canvas.addEventListener('click', function(e) {\n         e.preventDefault();\n        game.mouse = game.getMouse(e);\n        game.addBullet = true;\n      }, true);\n     canvas.addEventListener('mousemove', function(e) {\n          e.preventDefault();\n        game.mouse = game.getMouse(e);\n                \n      }, true)"],[0,";\n    "],[1," "],[-1,"var my = m"],[1,"canvas.addEventListener('touchmove', function(e) {\n          e.preventDefault();\n        game.mouse = game.getM"],[0,"ouse"],[-1,".y"],[1,"(e)"],[0,";\n    "],[-1,"//todo\n    game.shapes.push( Shape(mx, my, 60, 30, 'rgba(127, 255, 212, .5)')"],[1,"            \n      }, true);\n\n}\n\nfunction animate(dt) {\n    window.requestAnimationFrame( animate );\n    game.draw(dt);\n\n}\n\n\n\n\n////\n\n////TRASH\n\n////\n\nfunction convertToRadians(degree) {\n    return degree*(Math.PI/180);\n}\n\nfunction draw(dt) {\n\n    var time = dt * 0.002;\n    var x = Math.sin( time ) * 30 + 128;\n    var y = Math.cos( time * 1 ) * 50 + 128;\n\n    context.fillStyle = 'rgb(245,245,245)';\n    context.fillRect( 0, 0, 255, 255"],[0," );\n"],[1,"\n"],[0,"  "],[-1,"}, true);\n\n// example code from mr doob : http://mrdoob.com/lab/javascript/requestanimationframe/\n"],[1,"  context.fillStyle = 'rgb(255,0,0)';\n    context.beginPath();\n    context.arc( x, y, 10, 0, Math.PI * 2, true );\n    context.closePath();\n    context.fill();\n    \n    game.draw();\n}"]],"start1":9161,"start2":9161,"length1":318,"length2":1454}]],"length":10615,"saved":false}
{"ts":1347280997716,"patch":[[{"diffs":[[-1,"\n(function() {\n    var lastTime = 0;\n    var vendors = ['ms', 'moz', 'webkit', 'o'];\n    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];\n        window.cancelAnimationFrame = \n          window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];\n    }\n \n    if (!window.requestAnimationFrame)\n        window.requestAnimationFrame = function(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function() { callback(currTime + timeToCall); }, \n              timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n \n    if (!window.cancelAnimationFrame)\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n}());\n\n\nvar canvas, context, game;\n\n\n\n\n\nfunction Game(canvas, ctx){\n    var that = this;\n    \n    this.canvas = canvas;\n    this.ctx = ctx;\n    this.width = canvas.width;\n    this.height = canvas.height;\n    this.mouse = {x: this.width/2, y: 0};\n    this.bullets = [];\n    this.enemies = [];\n    this.tower = new Tower(this.width/2, this.height, 10, 20, 'rgb(0,0,0)');\n    this.viewfinder = new Viewfinder(0, 0, 20, 20, 'rgb(0,0,0)');\n    this.toClean = 0;\n    this.enemiesToClean = 0;\n    \n    this.createEnemies = setInterval(function() {\n        that.addEnemy = true;\n    }, 1000);\n    \n}\nGame.prototype.clear = function(){\n    this.ctx.fillStyle = 'rgb(245,245,245)';\n    this.ctx.fillRect( 0, 0, 255, 255 );\n}\n\n\n\nGame.prototype.draw = function(){\n    this.clear();\n    \n    if(this.addBullet){\n        var mouse = this.mouse;\n\n        //todo\n        var atan = game.tower.getRotate(mouse);           \n        game.bullets.push( new Bullet(game.tower.x, game.tower.y, 5, atan, 'rgba(125, 50, 50, 1)') );\n        this.addBullet = false;\n    }\n    if(this.addEnemy){\n        var x = Math.floor(Math.random() * this.width) + 1;\n        game.enemies.push( new Enemy(x, 0, 20, 20, 'rgba(125, 50, 50, 1)') );\n        this.addEnemy = false;\n    }\n    //enemies\n    var enemies = this.enemies;\n    var l = ( enemies && enemies.length) ? enemies.length : 0;\n    for (var i = 0; i < l; i++) {\n      var enemy = enemies[i];\n      \n      // We can skip the drawing of elements that have moved off the screen:\n      if (!enemy || enemy.y > this.height ){\n              \n              enemies[i] = false;\n              this.enemiesToClean++;\n              \n        }else{\n            enemies[i].draw(this.ctx);\n        }\n    }\n    \n    \n    \n    //Bullets\n    var shapes = this.bullets;\n    \n \n    // ** Add stuff you want drawn in the background all the time here **\n    this.tower.draw(this.ctx, this.mouse);\n    this.viewfinder.draw(this.ctx, this.mouse);\n \n    // draw all shapes\n    var l = ( shapes && shapes.length) ? shapes.length : 0;\n    for (var i = 0; i < l; i++) {\n      var shape = shapes[i];\n      \n      // We can skip the drawing of elements that have moved off the screen:\n      if (!shape || shape.x > this.width || shape.y > this.height ||\n          shape.x + shape.w < 0 || shape.y + shape.h < 0 || shape.offset > this.height){\n              \n              shapes[i] = false;\n              this.toClean++;\n              \n        }else{\n            shapes[i].draw(this.ctx);\n        }\n    }\n    \n    if(this.toClean > 2){\n        //console.log('clean', l);\n        this.bullets = shapes.filter(function(e){return e});\n        //console.log('cleaned: ', this.bullets.length);\n        this.toClean = 0;\n    }\n    if(this.enemiesToClean > 2){\n        //console.log('enemies clean', l);\n        this.enemies = enemies.filter(function(e){return e});\n        //console.log('enemies cleaned: ', this.enemies.length);\n        this.enemiesToClean = 0;\n    }\n}\nfunction Tower(x, y, w, h, fill) {\n  // This is a very simple and unsafe constructor. \n  // All we're doing is checking if the values exist.\n  // \"x || 0\" just means \"if there is a value for x, use that. Otherwise use 0.\"\n  this.x = x || 0;\n  this.y = y || 0;\n  this.w = w || 1;\n  this.h = h || 1;\n  this.fill = fill || '#AAAAAA';\n}\nTower.prototype.getRotate = function(mouse){\n    //Math.atan(2);\n    //tg = a/b\n    var a = mouse.x - this.x;\n   var b = mouse.y - this.y;\n   var tg = a/b;\n   var atan1 = Math.atan(tg);\n   console.log('mouse tg', tg);\n   var atan = -Math.PI*2-atan1;\n   return atan;\n}\nTower.prototype.draw = function(ctx, mouse){\n    ctx.save();\n    \n    ctx.fillStyle = this.fill;\n    context.beginPath();\n    context.arc( this.x, this.y, 10, 0, Math.PI * 2, true );\n    context.closePath();\n    context.fill();\n    if(typeof mouse !== \"undefined\"){\n           //Math.atan(2);\n           //tg = a/b\n           var atan = this.getRotate(mouse);\n           ctx.translate(this.x, this.y);\n           ctx.rotate(atan);\n           ctx.fillRect(0-this.w/2, 0-this.h, this.w, this.h);\n           \n    }\n    //ctx.fillStyle = '#AA00AA';\n    //ctx.fillRect(this.x - this.w /2, this.y - this.h, this.w, this.h);\n        \n    ctx.restore();\n}\n\n//from introduction to canvas http://simonsarris.com/blog/510-making-html5-canvas-useful\n\n// Constructor for Shape objects to hold data for all drawn objects.\n// For now they will just be defined as rectangles.\nfunction Bullet(x, y, w, angle, fill) {\n  // This is a very simple and unsafe constructor. \n  // All we're doing is checking if the values exist.\n  // \"x || 0\" just means \"if there is a value for x, use that. Otherwise use 0.\"\n  this.x = x || 0;\n  this.y = y || 0;\n  this.w = w || 1;\n  this.origAngle = angle || 0;\n  this.angle = Math.PI  + this.origAngle;\n  this.fill = fill || '#AAAAAA';\n  \n  this.offset = 1;\n}\n \n// Draws this shape to a given context\nBullet.prototype.draw = function(ctx) {\n    ctx.save();\n    \n    \n    context.beginPath();    \n    \n    ctx.translate(game.tower.x, game.tower.y);\n    ctx.rotate(this.angle); \n    ctx.fillStyle = 'rgba(0,245,245, 0.1 )';\n    context.fillRect(0, 0, 200, 200);\n          \n    ctx.fillStyle = this.fill;\n    context.arc( 0, 25+this.offset, this.w, 0, Math.PI * 2, true );\n    context.closePath();\n    context.fill();\n     ctx.restore();\n     \n    this.updatePosition(ctx);\n  //ctx.fillRect(this.x, this.y, this.w, this.h);\n};\n\nBullet.prototype.updatePosition = function(ctx) {\n    //var a = mouse.x - this.x;\n    //var b = mouse.y - this.y;\n    //var tg = a/b;\n    //var atan = -Math.PI*2 - Math.atan(tg);\n    \n    var atan = -(this.origAngle + Math.PI*2);// * Math.PI/180;\n    //console.log('bullet atan', atan);\n    var a_b = Math.tan(atan);\n    var xOffset = a_b / this.offset;\n    \n    this.y = game.tower.y - xOffset ;\n    console.log(this.y);\n    ctx.fillStyle = 'rgba(50,245,245, 0.6 )';\n    ctx.fillRect(this.x - this.w /2, this.y - this.w, this.w, this.w);\n    \n    this.offset += 1;\n};"],[1,"var canvas, context, game;\n"],[0,"\n\nfu"]],"start1":0,"start2":0,"length1":6929,"length2":31}]],"length":3717,"saved":false}
{"ts":1347281028740,"patch":[[{"diffs":[[0,";\n\n\n"],[-1,"function Enemy(x, y, w, h, fill) {\n  // This is a very simple and unsafe constructor. \n  // All we're doing is checking if the values exist.\n  // \"x || 0\" just means \"if there is a value for x, use that. Otherwise use 0.\"\n  this.x = x || 0;\n  this.y = y || 0;\n  this.w = w || 1;\n  this.h = h || 1;\n  this.fill = fill || 'rgba(0,245,245, 0.1 )';\n}\n\nEnemy.prototype.draw = function(ctx, mouse){\n    ctx.save();\n    \n    ctx.fillStyle = this.fill;\n        \n    //ctx.fillStyle = '#AA00AA';\n    ctx.fillRect(this.x - this.w /2, this.y - this.h, this.w, this.h);\n    \n    this.y += 1;\n        \n    ctx.restore();\n}\n\n\nfunction Viewfinder(x, y, w, h, fill) {\n  // This is a very simple and unsafe constructor. \n  // All we're doing is checking if the values exist.\n  // \"x || 0\" just means \"if there is a value for x, use that. Otherwise use 0.\"\n  this.x = x || 0;\n  this.y = y || 0;\n  this.w = w || 1;\n  this.h = h || 1;\n  this.fill = fill || '#AAAAAA';\n}\n \n// Draws this shape to a given context\nViewfinder.prototype.draw = function(ctx, mouse) {\n  \n    if(typeof mouse !== \"undefined\"){\n        ctx.strokeStyle = this.fill;\n        context.beginPath();\n        context.arc( mouse.x, mouse.y, this.w, 0, Math.PI * 2, true );\n        context.closePath();\n        context.stroke();\n    }\n    \n    \n  //ctx.fillRect(this.x, this.y, this.w, this.h);\n};"],[1,"\n"],[0,"\n\nGa"]],"start1":25,"start2":25,"length1":1351,"length2":9}]],"length":2375,"saved":false}
{"ts":1347281094524,"patch":[[{"diffs":[[0,"e;\n\n"],[-1,"\n\n\n\nGame.prototype.getMouse = function(e) {\n  var element = canvas, offsetX = 0, offsetY = 0, mx, my;\n \n  // Compute the total offset\n  if (element.offsetParent !== undefined) {\n    do {\n      offsetX += element.offsetLeft;\n      offsetY += element.offsetTop;\n    } while ((element = element.offsetParent));\n  }\n \n  // Add padding and border style widths to offset\n  // Also add the <html> offsets in case there's a position:fixed bar\n  //offsetX += this.stylePaddingLeft + this.styleBorderLeft + this.htmlLeft;\n  //offsetY += this.stylePaddingTop + this.styleBorderTop + this.htmlTop;\n if( e.targetTouches && e.targetTouches[0] ){\n     mx = e.targetTouches[0].pageX - offsetX;\n     my = e.targetTouches[0].pageY - offsetY;\n }else{\n      mx = e.pageX - offsetX;\n      my = e.pageY - offsetY;\n }\n \n  // We return a simple javascript object (a hash) with x and y defined\n  return {x: mx, y: my};\n}\n\n\n\n// example code from mr doob : http://mrdoob.com/lab/javascript/requestanimationframe/\n\n\n"],[0,"init"]],"start1":24,"start2":24,"length1":996,"length2":8},{"diffs":[[0,"t);\n\n}\n\n"],[-1,"\n\n\n"],[0,"////\n\n//"]],"start1":877,"start2":877,"length1":19,"length2":16}]],"length":1384,"saved":false}
{"contributors":[],"silentsave":false,"ts":1349949984022,"patch":[[{"diffs":[[0,"on init() {\n"],[1,"    var width = 480;//240;//640;\n    var height = 640;//320;//960;\n\n    var dw = window.innerWidth / window.devicePixelRatio;\n    var dh = window.innerHeight / window.devicePixelRatio;\n\n    width = (dw < width) ? dw : width;\n    height = (dh < height) ? dh : height;\n\n"],[0,"\n    canvas "]],"start1":54,"start2":54,"length1":24,"length2":292},{"diffs":[[0,"vas' );\n"],[-1,"    "],[0,"\n    can"]],"start1":376,"start2":376,"length1":20,"length2":16},{"diffs":[[0,"width = "],[-1,"256"],[1,"width"],[0,";\n    ca"]],"start1":396,"start2":396,"length1":19,"length2":21},{"diffs":[[0,"t = "],[-1,"256"],[1,"height"],[0,";\n\n "]],"start1":427,"start2":427,"length1":11,"length2":14},{"diffs":[[0,"xt( '2d' );\n"],[1,"\n\n"],[0,"    game = n"]],"start1":469,"start2":469,"length1":24,"length2":26},{"diffs":[[0," context"],[1,", width, height"],[0,");\n"],[-1,"\n"],[0,"    docu"]],"start1":510,"start2":510,"length1":20,"length2":34},{"diffs":[[0,"    "],[-1,"canvas.addEventListener('click', function"],[1,"function addBullet"],[0,"(e) {\n"],[-1," "],[0,"    "]],"start1":593,"start2":593,"length1":56,"length2":32},{"diffs":[[0,"ame."],[-1,"mouse = game.getMouse(e)"],[1,"e = e"],[0,";\n  "]],"start1":658,"start2":658,"length1":32,"length2":13},{"diffs":[[0,"    "],[-1,"  }, true);\n     canvas.addEventListener('mousemove', function"],[1,"}\n    function move"],[0,"(e) {\n"],[-1,"  "],[0,"    "]],"start1":700,"start2":700,"length1":78,"length2":33},{"diffs":[[0,"ame."],[-1,"mouse = game.getMouse(e)"],[1,"e = e"],[0,";\n    "],[-1," "],[-1,"           \n      }"],[1,"}\n//    canvas.addEventListener('click', addBullet"],[0,", tr"]],"start1":766,"start2":766,"length1":58,"length2":69},{"diffs":[[0,"let, true);\n"],[-1," "],[1,"//"],[0,"    canvas.a"]],"start1":828,"start2":828,"length1":25,"length2":26},{"diffs":[[0,"ouch"],[-1,"move', function(e) {\n          e.preventDefault();\n        game.mouse = game.getMouse(e);\n                \n      }, true);\n\n}\n\nfunction animate(dt) {\n    window.requestAnimationFrame( animate );\n    game.draw(dt);\n\n}\n\n////\n\n////TRASH\n\n////\n\nfunction convertToRadians(degree) {\n    return degree*(Math.PI/180);\n}\n\nfunction draw(dt) {\n\n    var time = dt * 0.002;\n    var x = Math.sin( time ) * 30 + 128;\n    var y = Math.cos( time * 1 ) * 50 + 128;\n\n    context.fillStyle = 'rgb(245,245,245)';\n    context.fillRect( 0, 0, 255, 255 );\n\n    context.fillStyle = 'rgb(255,0,0)';\n    context.beginPath();\n    context.arc( x, y, 10, 0, Math.PI * 2, true );\n    context.closePath();\n    context.fill();\n    \n    game.draw();\n}"],[1,"start', addBullet, true);\n    canvas.addEventListener('mousemove', move, true);\n    canvas.addEventListener('touchmove', move, true);\n\n}\n\nfunction animate(dt) {\n    window.requestAnimationFrame( animate );\n    game.frame(dt);\n\n}\n"]],"start1":872,"start2":872,"length1":721,"length2":233}]],"length":1105,"saved":false}
{"contributors":[],"silentsave":false,"ts":1351001334771,"patch":[[{"diffs":[[0,"    "],[-1,"game.e = e;\n        game.addBullet = true;\n    }\n    function move(e) {\n        e.preventDefault();\n        game.e = e;"],[1,"if( e.targetTouches && e.targetTouches[0] ){\n            game.e = {targetTouches: e.targetTouches};\n        }else{\n            game.e = {pageX: e.pageX, pageY: e.pageY};\n        }\n        game.addBullet = true;\n    }\n    function move(e) {\n        e.preventDefault();\n        if( e.targetTouches && e.targetTouches[0] ){\n            game.e = {targetTouches: e.targetTouches};\n        }else{\n            game.e = {pageX: e.pageX, pageY: e.pageY};\n        }"],[0,"\n   "]],"start1":653,"start2":653,"length1":127,"length2":463}]],"length":1441,"saved":false}
{"ts":1351001504738,"patch":[[{"diffs":[[0,"unction "],[-1,"addBullet"],[1,"move"],[0,"(e) {\n  "]],"start1":598,"start2":598,"length1":25,"length2":20},{"diffs":[[0,"          game.e"],[-1," = {"],[1,"."],[0,"targetTouches: e"]],"start1":699,"start2":699,"length1":36,"length2":33},{"diffs":[[0,".e.targetTouches"],[-1,":"],[1," ="],[0," e.targetTouches"]],"start1":713,"start2":713,"length1":33,"length2":34},{"diffs":[[0," e.targetTouches"],[-1,"}"],[0,";\n        }else{"]],"start1":731,"start2":731,"length1":33,"length2":32},{"diffs":[[0,"me.e"],[-1," = {pageX: e.pageX, pageY:"],[1,".pageX ="],[0," e.page"],[-1,"Y}"],[1,"X"],[0,";\n    "],[-1,"    }\n"],[0,"    "]],"start1":778,"start2":778,"length1":55,"length2":30},{"diffs":[[0,"ame."],[-1,"addBullet = true;\n    }\n    function move(e) {\n        e.preventDefault();\n        if( e.targetTouches && e.targetTouches[0] ){\n            game.e = {targetTouches: e.targetTouches};\n        }else{\n            game.e = {pageX: e.pageX, pageY: e.pageY};\n        }\n    }\n//    canvas.addEventListener('click', addBullet, true);\n//    canvas.addEventListener('touchstart', addBullet, true);"],[1,"e.pageY = e.pageY;\n        }\n    }\n"],[0,"\n   "]],"start1":813,"start2":813,"length1":395,"length2":43}]],"length":1056,"saved":false}
